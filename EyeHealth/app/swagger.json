openapi: 3.0.2
info:
  title: User Service API
  description: Документация API для управления пользователями
  version: 1.0.0
paths:
  /register:
    post:
      summary: Регистрация нового пользователя
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Пользователь зарегистрирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth:
    post:
      summary: Аутентификация пользователя
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Неверные учетные данные
  /users/me:
    get:
      summary: Получить информацию о текущем пользователе
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
components:
  schemas:
    UserCreate:
      type: object
      properties:
        name:
          type: string
        phone_number:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - Admin
            - Doctor
        password:
          type: string
          format: password
      required:
        - name
        - phone_number
        - email
        - role
        - password
    UserResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        phone_number:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - Admin
            - Doctor
    AuthRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
openapi: 3.0.2
info:
  title: Image Processor API
  description: >-
    API для обработки изображений: фильтрация, сегментация, нормализация и
    улучшение качества
  version: 1.0.0
paths:
  /process:
    post:
      summary: Обработать изображение
      tags:
        - image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Обработанное изображение
          content:
            image/png: {}
  /resize:
    post:
      summary: Изменить размер изображения
      tags:
        - image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                width:
                  type: integer
                height:
                  type: integer
      responses:
        '200':
          description: Измененное изображение
          content:
            image/png: {}
  /enhance-contrast:
    post:
      summary: Повысить контраст изображения
      tags:
        - image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Изображение с улучшенным контрастом
          content:
            image/png: {}
  /normalize:
    post:
      summary: Нормализовать изображение
      tags:
        - image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Нормализованное изображение
          content:
            image/png: {}
components:
  schemas:
    ImageUpload:
      type: object
      properties:
        image:
          type: string
          format: binary
openapi: 3.0.2
info:
  title: Neural Network Service API
  description: API для управления нейросетевой моделью, включая обучение, предсказания и управление логами.
  version: 1.0.0
paths:
  /train:
    post:
      summary: Обучить модель
      tags:
        - Model
      responses:
        '200':
          description: Модель успешно обучена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /predict:
    post:
      summary: Сделать предсказание
      tags:
        - Model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictionRequest'
      responses:
        '200':
          description: Предсказание модели
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionResponse'
  /save-model:
    post:
      summary: Сохранить текущую модель
      tags:
        - Model
      responses:
        '200':
          description: Модель успешно сохранена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /load-model:
    post:
      summary: Загрузить сохранённую модель
      tags:
        - Model
      responses:
        '200':
          description: Модель успешно загружена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /logs:
    get:
      summary: Получить логи предсказаний
      tags:
        - Logs
      responses:
        '200':
          description: История предсказаний
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PredictionLog'
  /data/load:
    post:
      summary: Загрузить данные из базы
      tags:
        - Data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataLoadRequest'
      responses:
        '200':
          description: Данные успешно загружены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataLoadResponse'
components:
  schemas:
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: Operation completed successfully
    PredictionRequest:
      type: object
      properties:
        input_data:
          type: array
          items:
            type: number
          example:
            - 0.1
            - 0.5
            - 0.8
            - 0.3
            - 0.9
    PredictionResponse:
      type: object
      properties:
        prediction:
          type: array
          items:
            type: number
          example:
            - 0.76
    PredictionLog:
      type: object
      properties:
        id:
          type: integer
        input_data:
          type: object
        prediction:
          type: object
        created_at:
          type: string
          format: date-time
      example:
        id: 1
        input_data:
          values:
            - 0.1
            - 0.5
            - 0.8
        prediction:
          result:
            - 0.76
        created_at: '2024-02-10T12:34:56Z'
    DataLoadRequest:
      type: object
      properties:
        query:
          type: string
          example: SELECT * FROM training_data
    DataLoadResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: number
          example:
            - - 0.1
              - 0.2
              - 0.3
            - - 0.4
              - 0.5
              - 0.6
