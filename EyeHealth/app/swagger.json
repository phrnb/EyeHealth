openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: API для управления пользователями, регистрации и аутентификации
servers:
  - url: http://localhost:8000
    description: Локальный сервер
paths:
  /register:
    post:
      summary: Регистрация пользователя
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        "200":
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Пользователь зарегистрирован!"
  /auth:
    post:
      summary: Аутентификация пользователя
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        "200":
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Неверные учетные данные
  /users/me:
    get:
      summary: Получение информации о текущем пользователе
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserCreate:
      type: object
      required:
        - name
        - phone_number
        - email
        - password
        - role
      properties:
        name:
          type: string
          example: "John Doe"
        phone_number:
          type: string
          example: "+123456789"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "securepassword"
        role:
          type: string
          enum: [Admin, Doctor]
    AuthRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "securepassword"
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        phone_number:
          type: string
          example: "+123456789"
        role:
          type: string
          enum: [Admin, Doctor]

openapi: 3.0.0
info:
  title: Image Processing API
  description: API для обработки изображений с использованием различных техник
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Основной сервер

paths:
  /convert_format:
    post:
      summary: Конвертировать изображение в нужный формат
      description: Преобразует изображение в указанный формат.
      operationId: convertFormat
      parameters:
        - in: query
          name: format_type
          required: true
          schema:
            type: string
            description: Формат для конвертации
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для конвертации
      responses:
        '200':
          description: Изображение успешно конвертировано
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Конвертированное изображение

  /resize_image:
    post:
      summary: Изменить размер изображения
      description: Изменяет размер изображения на указанные ширину и высоту.
      operationId: resizeImage
      parameters:
        - in: query
          name: width
          required: true
          schema:
            type: integer
            description: Новая ширина изображения
        - in: query
          name: height
          required: true
          schema:
            type: integer
            description: Новая высота изображения
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для изменения размера
      responses:
        '200':
          description: Изображение успешно изменено
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Изображение с новым размером

  /apply_sobel:
    post:
      summary: Применить оператор Собеля
      description: Применяет оператор Собеля для обнаружения границ.
      operationId: applySobel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для применения оператора Собеля
      responses:
        '200':
          description: Результат применения оператора Собеля
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Изображение после применения оператора Собеля

  /remove_noise:
    post:
      summary: Удалить шум с изображения
      description: Удаляет шум типа "соль и перец" с изображения.
      operationId: removeNoise
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для удаления шума
      responses:
        '200':
          description: Изображение без шума
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Изображение без шума

  /extract_edges:
    post:
      summary: Извлечь края изображения
      description: Применяет алгоритм для извлечения краев изображения.
      operationId: extractEdges
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для извлечения краев
      responses:
        '200':
          description: Края изображения
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Изображение с извлеченными краями

  /segment_image:
    post:
      summary: Сегментировать изображение
      description: Применяет пороговую бинаризацию для сегментации изображения.
      operationId: segmentImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для сегментации
      responses:
        '200':
          description: Сегментированное изображение
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Сегментированное изображение

  /normalize_image:
    post:
      summary: Нормализовать изображение
      description: Нормализует изображение с использованием минимально-максимации.
      operationId: normalizeImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для нормализации
      responses:
        '200':
          description: Нормализованное изображение
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Нормализованное изображение

  /enhance_contrast:
    post:
      summary: Повысить контраст изображения
      description: Применяет алгоритм повышения контраста с использованием CLAHE.
      operationId: enhanceContrast
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Изображение для повышения контраста
      responses:
        '200':
          description: Изображение с улучшенным контрастом
          content:
            application/json:
              schema:
                type: object
                properties:
                  image:
                    type: string
                    format: binary
                    description: Изображение с повышенным контрастом


openapi: 3.0.0
info:
  title: Neural Network Service API
  description: API для обучения модели нейронной сети и выполнения предсказаний.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Основной сервер

paths:
  /train_model:
    post:
      summary: Обучение модели нейронной сети
      description: Запуск процесса обучения модели нейронной сети.
      operationId: trainModel
      responses:
        '200':
          description: Модель успешно обучена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Модель успешно обучена и сохранена."

  /predict:
    post:
      summary: Предсказание с использованием модели
      description: Выполнение предсказания на основе обученной модели.
      operationId: predict
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                input_data:
                  type: array
                  items:
                    type: number
                  description: Входные данные для предсказания (например, 10 признаков)
      responses:
        '200':
          description: Результат предсказания
          content:
            application/json:
              schema:
                type: object
                properties:
                  prediction:
                    type: array
                    items:
                      type: number
                    description: Результат предсказания модели.
                  message:
                    type: string
                    example: "Предсказание успешно выполнено и сохранено."

  /log_prediction:
    post:
      summary: Логирование предсказания
      description: Логирование предсказания в базе данных.
      operationId: logPrediction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                input_data:
                  type: array
                  items:
                    type: number
                  description: Входные данные для предсказания (например, 10 признаков)
                prediction:
                  type: array
                  items:
                    type: number
                  description: Результат предсказания модели.
      responses:
        '200':
          description: Предсказание успешно залогировано
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Предсказание успешно залогировано в базе данных."

  /retrieve_logs:
    get:
      summary: Получение логов предсказаний
      description: Загрузка всех логов предсказаний из базы данных.
      operationId: retrieveLogs
      responses:
        '200':
          description: Логи предсказаний
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Идентификатор записи
                    input_data:
                      type: object
                      description: Входные данные для предсказания
                    prediction:
                      type: object
                      description: Результат предсказания
                    created_at:
                      type: string
                      format: date-time
                      description: Время создания записи

  /save_model:
    post:
      summary: Сохранить модель
      description: Сохранить текущую модель в файл.
      operationId: saveModel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: Путь для сохранения модели.
                  example: "model.h5"
      responses:
        '200':
          description: Модель успешно сохранена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Модель успешно сохранена."

  /load_model:
    post:
      summary: Загрузить модель
      description: Загрузить модель из файла.
      operationId: loadModel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: Путь к файлу модели.
                  example: "model.h5"
      responses:
        '200':
          description: Модель успешно загружена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Модель успешно загружена."

components:
  schemas:
    Prediction:
      type: object
      properties:
        input_data:
          type: object
          description: Входные данные для модели
        prediction:
          type: object
          description: Результат предсказания
        created_at:
          type: string
          format: date-time
          description: Время предсказания


openapi: 3.0.0
info:
  title: Monitoring Service API
  description: API для сбора системных метрик, обнаружения аномалий и отправки уведомлений.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Основной сервер

paths:
  /metrics:
    get:
      summary: Получить системные метрики
      description: Возвращает текущие метрики системы, включая использование CPU, памяти и количество запросов.
      operationId: getMetrics
      responses:
        '200':
          description: Успешный ответ с метриками
          content:
            application/json:
              schema:
                type: object
                properties:
                  cpu_usage:
                    type: number
                    description: Процент использования CPU.
                    example: 75
                  memory_usage:
                    type: number
                    description: Процент использования памяти.
                    example: 85
                  requests_count:
                    type: integer
                    description: Количество запросов, сохранённых в Redis.
                    example: 120
        '500':
          description: Ошибка на сервере
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Описание ошибки
                    example: "Не удалось собрать метрики."

  /report:
    get:
      summary: Получить отчет о логах
      description: Возвращает список всех логов мониторинга, сохранённых в базе данных.
      operationId: getReport
      responses:
        '200':
          description: Успешный ответ с отчётом
          content:
            application/json:
              schema:
                type: object
                properties:
                  report:
                    type: array
                    items:
                      type: string
                    description: Список сообщений логов мониторинга.
                    example:
                      - "2025-02-13 12:00:00: Высокая нагрузка на CPU: 85%"
                      - "2025-02-13 12:10:00: Высокое использование памяти: 90%"
        '500':
          description: Ошибка на сервере
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Описание ошибки
                    example: "Не удалось получить отчёт из базы данных."

components:
  schemas:
    Metric:
      type: object
      properties:
        cpu_usage:
          type: number
          description: Процент использования CPU.
        memory_usage:
          type: number
          description: Процент использования памяти.
        requests_count:
          type: integer
          description: Количество запросов, сохранённых в Redis.
      
    Report:
      type: object
      properties:
        report:
          type: array
          items:
            type: string
          description: Список сообщений логов мониторинга.


openapi: 3.0.0
info:
  title: API Gateway
  description: API для маршрутизации запросов с аутентификацией, ограничением частоты, кэшированием и защитой.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Основной сервер

paths:
  /route/{endpoint}:
    get:
      summary: Маршрутизация запроса
      description: Перенаправляет запросы на один из доступных сервисов.
      operationId: routeRequest
      parameters:
        - name: endpoint
          in: path
          required: true
          description: Конечная точка для маршрутизации запроса.
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ с информацией о маршруте
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect_to:
                    type: string
                    description: URL сервисов, на которые будет перенаправлен запрос.
                    example: "http://service1.local/endpoint"
        '400':
          description: Ошибка при обработке запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Подробности ошибки
                    example: "Invalid endpoint"
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Подробности ошибки
                    example: "Authorization required"
        '429':
          description: Превышен лимит запросов
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Подробности ошибки
                    example: "Too many requests"

  /token/{user_id}:
    get:
      summary: Получить токен аутентификации
      description: Генерация токена для пользователя, который можно использовать для доступа к защищённым эндпоинтам.
      operationId: getToken
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя для создания токена.
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ с токеном
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT токен для аутентификации.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Ошибка при создании токена
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Подробности ошибки
                    example: "User ID is required"
        '401':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    description: Подробности ошибки
                    example: "Invalid credentials"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  security:
    - BearerAuth: []

